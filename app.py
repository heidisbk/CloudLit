import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from run import page_1, page_2


df = pd.read_csv('data.csv').dropna()

### Config
st.set_page_config(
    page_title="Dashboard Marketing",
    page_icon="üöÄ",
    layout="wide"
)

def home_page():
    st.title("Votre Dashboard interactif avec Streamlit üé®")

    st.markdown("""
    
    Bienvenue sur notre plateforme interactive qui vous permettra d'explorer et d'analyser des donn√©es de mani√®re intuitive. Ce Dashboard a √©t√© sp√©cialement con√ßu pour vous aider √† mieux comprendre les concepts cl√©s de la data science et √† acqu√©rir une exp√©rience pratique en utilisant Streamlit.

    ### Comment utiliser `Streamlit` ?

    Voici les quelques commandes de base pour utiliser `Streamlit` :

    ### Titre et texte
    - `st.title('Title')` : pour afficher un titre
    - `st.markdown('Some text')` : pour afficher du texte
    - `st.write(data)` ou `st.dataframe(df)` : pour afficher des donn√©es

    ### Widgets
    - `st.checkbox('Show raw data')` : pour afficher des donn√©es brutes
    - `st.selectbox('Choose a city',('London','New York','San Francisco'))` : pour afficher une liste d√©roulante
    - `st.button('Submit')` : pour afficher un bouton de soumission

    ### Afficher des graphiques
    - `st.line_chart(data)` : pour afficher un graphique lin√©aire
    - `st.bar_chart(data)` : pour afficher un graphique √† barres
    - `st.pyplot(fig)` : pour afficher un graphique matplotlib
    - `st.map(data)` : pour afficher une carte

    """)



    ## Affichage des donn√©es brutes √† l'aide d'une checkbox
    st.subheader("Affichage des donn√©es brutes")

    #1. Afficher les donn√©es brutes avec : st.write
    if st.checkbox('Afficher les donn√©es brutes'):
        st.subheader('Donn√©es brutes')
        st.write(df)

    st.subheader("Affichage des graphiques")

    #2. Afficher le graphique contenu dans la variable fig avec : st.plotly_chart
    fig = px.histogram(df.sort_values("Profession"), x="Profession", barmode="group")
    st.plotly_chart(fig, use_container_width=True)


    #3. Afficher le graphique contenu dans la variable fig avec : st.bar_chart
    Family_Size_per_Work_Experience = df.set_index("Work_Experience")['Family_Size']
    st.bar_chart(Family_Size_per_Work_Experience)




    st.subheader("Affichage dynamique des donn√©es")

    #### Create two columns
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**1Ô∏è‚É£ Example de widget**")

        #4. Cr√©er une liste d√©roulante pour la variable 'Profession' avec : st.selectbox
        Profession_ = st.selectbox("Choisissez la profession :", df.Profession.unique())

        #5. Cr√©er une liste d√©roulante avec : st.selectbox contenanant la liste : ['Age', 'Work_Experience', 'Family_Size'] 
        Crit√®re_ = st.selectbox("Choisissez le crit√®re :", ['Age', 'Work_Experience', 'Family_Size'])

        # S√©lectionner les donn√©es correspondantes √† la profession choisie
        data = df[df['Profession'] == Profession_].groupby('Gender').mean()[Crit√®re_]

        # Cr√©ation de la figure
        fig = go.Figure(data=[go.Bar(x=data.index, y=data.values)])

        # Mise en forme du graphique
        fig.update_layout(title=f'R√©partition hommes-femmes en fonction de la profession : {Profession_}',
                        xaxis_title='Genre',
                        yaxis_title='Moyenne d\'√¢ge')

        fig.update_layout(bargap=0.2)
        st.plotly_chart(fig, use_container_width=True)


    with col2:
        st.markdown("**2Ô∏è‚É£ Example de widget form**")

        with st.form("average_sales_per_country"):

            #6. Cr√©ez une liste d√©roulante avec : st.selectbox contenanant la liste : ['Ever_Married', 'Graduated']
            #   Cr√©ez une liste d√©roulante avec : st.selectbox contenanant la liste : ['Yes', 'No']
            #   Cr√©ez une liste d√©roulante avec : st.selectbox contenanant la liste : range(18, 100, 5) et range(0, 15)

            Crit√®re = st.selectbox("S√©lectionnez un crit√®re :", ['Ever_Married', 'Graduated'])
            
            Boolean = st.selectbox("S√©lectionnez une valeur :", ['Yes', 'No'])

            age = st.selectbox("S√©lectionnez un age minimum :", range(18, 100, 5))
            family = st.selectbox("S√©lectionnez la taille minimum du foyer :", range(0, 15))
            

            #7. Cr√©ez un bouton pour soumettre le formulaire avec : st.form_submit_button
            submit = st.form_submit_button(label="Soumettre")


            if submit:
                data_ = df[df[Crit√®re]==Boolean]
                data_ = data_[(data_['Age']>=age) & (data_['Family_Size']>=family)]

                #8. Affichez la moyenne de la variable 'Work_Experience' avec la commande : st.metric
                st.metric("Nombre d'ann√©e d'exp√©rience moyen :", value=df.Work_Experience.mean())




#9. Cr√©ez une colonne lat√©rale avec : st.sidebar.header
st.sidebar.header("Build dashboards with Streamlit")

### Pages dictionnaire
page = st.sidebar.selectbox("Choisissez une page :", ["Page d'accueil", "Tutorial", "Video"])

dict_page = {"Page d'accueil": home_page, "Tutorial": page_1, "Video": page_2}

dict_page[page]()

st.sidebar.markdown("""* [Bienvenue sur votre Dashboard](#votre-dashboard-interactif-avec-streamlit)""")
st.sidebar.markdown("""* [Affichage des donn√©es brutes](#affichage-des-donn-es-brutes)""")
st.sidebar.markdown("""* [Affichage des graphiques](#affichage-des-graphiques)""")
st.sidebar.markdown("""* [Affichage dynamique des donn√©es](#affichage-dynamique-des-donn-es)""")


#10. Cr√©ez un footer avec : st.columns([1, 1])
# footer, empty_space = #** √† compl√©ter avec la fonction footer, __ = st.columns([1, 1]) **#

# with footer:
    # Ajouter du texte avec : st.markdown
